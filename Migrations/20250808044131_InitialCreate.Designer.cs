// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cabapi;

#nullable disable

namespace cabapi.Migrations
{
    [DbContext(typeof(CABDB))]
    [Migration("20250808044131_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("cabapi.Models.Clasificador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Latitud")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitud")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZonaId");

                    b.ToTable("Clasificadores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            FechaCreacion = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitud = 21.0635822m,
                            Longitud = -101.5803752m,
                            Nombre = "Entrada Principal",
                            ZonaId = 5
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            FechaCreacion = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitud = 21.0636721m,
                            Longitud = -101.580911m,
                            Nombre = "Pasillo",
                            ZonaId = 5
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            FechaCreacion = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitud = 21.0636795m,
                            Longitud = -101.5804751m,
                            Nombre = "Pasillo Superior",
                            ZonaId = 5
                        });
                });

            modelBuilder.Entity("cabapi.Models.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("Calificacion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Calificacion = 5,
                            FechaHora = new DateTime(2025, 7, 10, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Texto = "Excelente sistema de clasificación automática. Muy útil para nuestro centro de trabajo.",
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Calificacion = 5,
                            FechaHora = new DateTime(2025, 7, 15, 14, 20, 0, 0, DateTimeKind.Unspecified),
                            Texto = "La precisión del clasificador es impresionante. Recomiendo totalmente este producto.",
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Calificacion = 4,
                            FechaHora = new DateTime(2025, 7, 20, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Texto = "Fácil instalación y excelentes resultados. El soporte técnico es muy bueno.",
                            UsuarioId = 3
                        });
                });

            modelBuilder.Entity("cabapi.Models.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime>("FechaCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NumeroCompra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Compras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "Completada",
                            FechaCompra = new DateTime(2025, 7, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Impuestos = 2800.00m,
                            NumeroCompra = "C-2025-001",
                            Observaciones = "Compra de componentes ESP32-CAM para producción mensual",
                            ProveedorId = 1,
                            SubTotal = 17500.00m,
                            Total = 20300.00m
                        },
                        new
                        {
                            Id = 2,
                            Estado = "En Proceso",
                            FechaCompra = new DateTime(2025, 7, 5, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Impuestos = 1360.00m,
                            NumeroCompra = "C-2025-002",
                            Observaciones = "Pedido de carcasas plásticas y accesorios",
                            ProveedorId = 2,
                            SubTotal = 8500.00m,
                            Total = 9860.00m
                        });
                });

            modelBuilder.Entity("cabapi.Models.CompraDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CompraId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaPrimaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("MateriaPrimaId");

                    b.ToTable("CompraDetalles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 50.00m,
                            CompraId = 1,
                            MateriaPrimaId = 1,
                            PrecioUnitario = 350.00m,
                            SubTotal = 17500.00m
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 100.00m,
                            CompraId = 2,
                            MateriaPrimaId = 2,
                            PrecioUnitario = 85.00m,
                            SubTotal = 8500.00m
                        });
                });

            modelBuilder.Entity("cabapi.Models.Cotizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CorreoCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmpresaCliente")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime>("FechaCotizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroCotizacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<string>("RequirimientosEspeciales")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TelefonoCliente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Cotizaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 5,
                            CorreoCliente = "maria.gonzalez@empresa.com",
                            EmpresaCliente = "Corporativo del Bajío SA",
                            Estado = "Pendiente",
                            FechaCotizacion = new DateTime(2025, 7, 20, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            Impuestos = 6240.00m,
                            NombreCliente = "María González",
                            NumeroCotizacion = "COT-2025-001",
                            Observaciones = "Cotización para implementación en 5 sucursales",
                            PrecioUnitario = 7800.00m,
                            ProductoId = 3,
                            RequirimientosEspeciales = "Necesitan capacitación del personal y soporte técnico por 6 meses",
                            SubTotal = 39000.00m,
                            TelefonoCliente = "477-987-6543",
                            Total = 45240.00m
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 3,
                            CorreoCliente = "roberto.h@hotel.com",
                            EmpresaCliente = "Hotel Ejecutivo León",
                            Estado = "Aprobada",
                            FechaCotizacion = new DateTime(2025, 7, 22, 16, 20, 0, 0, DateTimeKind.Unspecified),
                            Impuestos = 2016.00m,
                            NombreCliente = "Roberto Hernández",
                            NumeroCotizacion = "COT-2025-002",
                            Observaciones = "Instalación en lobby, restaurante y áreas comunes",
                            PrecioUnitario = 4200.00m,
                            ProductoId = 2,
                            RequirimientosEspeciales = "Integración con sistema de gestión hotelera existente",
                            SubTotal = 12600.00m,
                            TelefonoCliente = "477-456-7890",
                            Total = 14616.00m
                        });
                });

            modelBuilder.Entity("cabapi.Models.Deteccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClasificadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClasificadorId");

                    b.ToTable("Detecciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClasificadorId = 1,
                            FechaHora = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Tipo = "organico"
                        },
                        new
                        {
                            Id = 2,
                            ClasificadorId = 2,
                            FechaHora = new DateTime(2025, 7, 6, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            Tipo = "valorizable"
                        },
                        new
                        {
                            Id = 3,
                            ClasificadorId = 3,
                            FechaHora = new DateTime(2025, 7, 6, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Tipo = "no_valorizable"
                        });
                });

            modelBuilder.Entity("cabapi.Models.MateriaPrima", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("StockMinimo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("MateriasPrimas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Módulo microcontrolador con cámara integrada para IoT",
                            FechaCreacion = new DateTime(2025, 6, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "ESP32-CAM",
                            PrecioUnitario = 350.00m,
                            Stock = 50.00m,
                            StockMinimo = 10.00m,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Carcasa resistente para dispositivos IoT, material ABS",
                            FechaCreacion = new DateTime(2025, 6, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Carcasa Plástica",
                            PrecioUnitario = 85.00m,
                            Stock = 100.00m,
                            StockMinimo = 20.00m,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Descripcion = "Adaptador de corriente 5V 2A para dispositivos",
                            FechaCreacion = new DateTime(2025, 6, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Fuente de Alimentación 5V",
                            PrecioUnitario = 120.00m,
                            Stock = 75.00m,
                            StockMinimo = 15.00m,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Descripcion = "Sensor de distancia ultrasónico HC-SR04",
                            FechaCreacion = new DateTime(2025, 6, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sensor Ultrasónico",
                            PrecioUnitario = 45.00m,
                            Stock = 30.00m,
                            StockMinimo = 5.00m,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Descripcion = "Cable USB tipo C para programación y alimentación",
                            FechaCreacion = new DateTime(2025, 6, 5, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Cable USB",
                            PrecioUnitario = 25.00m,
                            Stock = 80.00m,
                            StockMinimo = 20.00m,
                            UnidadMedida = "Pieza"
                        });
                });

            modelBuilder.Entity("cabapi.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Imagen")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Costo = 1200.00m,
                            Descripcion = "Sistema básico de clasificación automática de basura con ESP32-CAM. Incluye inteligencia artificial para identificar residuos orgánicos, valorizables y no valorizables.",
                            FechaCreacion = new DateTime(2025, 6, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Imagen = "/images/productos/cab-basico.jpg",
                            Nombre = "CAB Clasificador Básico",
                            Precio = 2500.00m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Costo = 2100.00m,
                            Descripcion = "Sistema avanzado con sensores adicionales, conectividad WiFi mejorada y dashboard en tiempo real. Perfecto para oficinas y centros educativos.",
                            FechaCreacion = new DateTime(2025, 6, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Imagen = "/images/productos/cab-pro.jpg",
                            Nombre = "CAB Clasificador Pro",
                            Precio = 4200.00m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Costo = 3900.00m,
                            Descripcion = "Solución empresarial completa con múltiples sensores, análisis avanzado, reportes detallados y soporte técnico premium.",
                            FechaCreacion = new DateTime(2025, 6, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Imagen = "/images/productos/cab-enterprise.jpg",
                            Nombre = "CAB Clasificador Enterprise",
                            Precio = 7800.00m,
                            Stock = 8
                        });
                });

            modelBuilder.Entity("cabapi.Models.ProductoMateriaPrima", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CantidadRequerida")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MateriaPrimaId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<string>("UnidadMedida")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MateriaPrimaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductoMateriasPrimas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 1,
                            ProductoId = 1,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 2,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 2,
                            ProductoId = 1,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 3,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 3,
                            ProductoId = 1,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 4,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 5,
                            ProductoId = 1,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 5,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 1,
                            ProductoId = 2,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 6,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 2,
                            ProductoId = 2,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 7,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 3,
                            ProductoId = 2,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 8,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 4,
                            ProductoId = 2,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 9,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 5,
                            ProductoId = 2,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 10,
                            CantidadRequerida = 2.00m,
                            MateriaPrimaId = 1,
                            ProductoId = 3,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 11,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 2,
                            ProductoId = 3,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 12,
                            CantidadRequerida = 1.00m,
                            MateriaPrimaId = 3,
                            ProductoId = 3,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 13,
                            CantidadRequerida = 2.00m,
                            MateriaPrimaId = 4,
                            ProductoId = 3,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 14,
                            CantidadRequerida = 2.00m,
                            MateriaPrimaId = 5,
                            ProductoId = 3,
                            UnidadMedida = "Pieza"
                        });
                });

            modelBuilder.Entity("cabapi.Models.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Producto")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Correo = "ventas@techcomponents.com",
                            Direccion = "Av. Tecnológico 123, León, Guanajuato",
                            FechaCreacion = new DateTime(2025, 6, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "TechComponents SA de CV",
                            Producto = "Componentes electrónicos",
                            Telefono = "477-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Correo = "contacto@plasticosmx.com",
                            Direccion = "Blvd. Industrial 456, León, Guanajuato",
                            FechaCreacion = new DateTime(2025, 6, 5, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "PlásticosMX",
                            Producto = "Carcasas y estructuras plásticas",
                            Telefono = "477-234-5678"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Correo = "info@sensoresymas.com",
                            Direccion = "Zona Industrial Norte 789, León, Guanajuato",
                            FechaCreacion = new DateTime(2025, 6, 10, 8, 15, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sensores y Más",
                            Producto = "Sensores y cámaras",
                            Telefono = "477-345-6789"
                        });
                });

            modelBuilder.Entity("cabapi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EnLinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaUltimoAcceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Correo = "superadmin@utleon.edu.mx",
                            EnLinea = false,
                            FechaCreacion = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaUltimoAcceso = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Super Administrador",
                            Password = "75K3eLr+dx6JJFuJ7LwIpEpOFmwGZZkRiB84PURz6U8=",
                            Rol = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Correo = "admin@utleon.edu.mx",
                            EnLinea = false,
                            FechaCreacion = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaUltimoAcceso = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Administrador",
                            Password = "JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=",
                            Rol = "admin"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Correo = "cliente@utleon.edu.mx",
                            EnLinea = false,
                            FechaCreacion = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaUltimoAcceso = new DateTime(2025, 7, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Cliente Demo",
                            Password = "CaMacAHiYaseBWGCpx089X9YLKminP9euDvg8FSXMKk=",
                            Rol = "cliente"
                        });
                });

            modelBuilder.Entity("cabapi.Models.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("DireccionEnvio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime>("FechaVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("NumeroVenta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ventas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 2,
                            DireccionEnvio = "Universidad Tecnológica de León, Blvd. Universidad Tecnológica #225, León, Gto.",
                            Estado = "Entregada",
                            FechaVenta = new DateTime(2025, 7, 10, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Impuestos = 800.00m,
                            NumeroVenta = "V-2025-001",
                            Observaciones = "Instalación en edificios A y B de la universidad",
                            PrecioUnitario = 2500.00m,
                            ProductoId = 1,
                            SubTotal = 5000.00m,
                            Total = 5800.00m,
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 1,
                            DireccionEnvio = "Universidad Tecnológica de León, Blvd. Universidad Tecnológica #225, León, Gto.",
                            Estado = "En Proceso",
                            FechaVenta = new DateTime(2025, 7, 15, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            Impuestos = 672.00m,
                            NumeroVenta = "V-2025-002",
                            Observaciones = "Sistema para cafetería principal",
                            PrecioUnitario = 4200.00m,
                            ProductoId = 2,
                            SubTotal = 4200.00m,
                            Total = 4872.00m,
                            UsuarioId = 3
                        });
                });

            modelBuilder.Entity("cabapi.Models.Zona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Zonas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Edificio A"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Edificio B"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Edificio C"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Edificio C Pesado"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Edificio D"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Cafetería"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Edificio CVD"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Edificio F"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Edificio de Rectoría"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nombre = "Almacén"
                        });
                });

            modelBuilder.Entity("cabapi.Models.Clasificador", b =>
                {
                    b.HasOne("cabapi.Models.Zona", "Zona")
                        .WithMany("Clasificadores")
                        .HasForeignKey("ZonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("cabapi.Models.Comentario", b =>
                {
                    b.HasOne("cabapi.Models.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("cabapi.Models.Compra", b =>
                {
                    b.HasOne("cabapi.Models.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("cabapi.Models.CompraDetalle", b =>
                {
                    b.HasOne("cabapi.Models.Compra", "Compra")
                        .WithMany("Detalles")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cabapi.Models.MateriaPrima", "MateriaPrima")
                        .WithMany("CompraDetalles")
                        .HasForeignKey("MateriaPrimaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("MateriaPrima");
                });

            modelBuilder.Entity("cabapi.Models.Cotizacion", b =>
                {
                    b.HasOne("cabapi.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("cabapi.Models.Deteccion", b =>
                {
                    b.HasOne("cabapi.Models.Clasificador", "Clasificador")
                        .WithMany("Detecciones")
                        .HasForeignKey("ClasificadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clasificador");
                });

            modelBuilder.Entity("cabapi.Models.ProductoMateriaPrima", b =>
                {
                    b.HasOne("cabapi.Models.MateriaPrima", "MateriaPrima")
                        .WithMany("ProductoMateriasPrimas")
                        .HasForeignKey("MateriaPrimaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cabapi.Models.Producto", "Producto")
                        .WithMany("ProductoMateriasPrimas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MateriaPrima");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("cabapi.Models.Venta", b =>
                {
                    b.HasOne("cabapi.Models.Producto", "Producto")
                        .WithMany("Ventas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cabapi.Models.Usuario", "Usuario")
                        .WithMany("Ventas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("cabapi.Models.Clasificador", b =>
                {
                    b.Navigation("Detecciones");
                });

            modelBuilder.Entity("cabapi.Models.Compra", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("cabapi.Models.MateriaPrima", b =>
                {
                    b.Navigation("CompraDetalles");

                    b.Navigation("ProductoMateriasPrimas");
                });

            modelBuilder.Entity("cabapi.Models.Producto", b =>
                {
                    b.Navigation("ProductoMateriasPrimas");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("cabapi.Models.Proveedor", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("cabapi.Models.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("cabapi.Models.Zona", b =>
                {
                    b.Navigation("Clasificadores");
                });
#pragma warning restore 612, 618
        }
    }
}
